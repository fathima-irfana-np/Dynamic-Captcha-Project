<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fixed CAPTCHA Verification</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
:root{
  --dark-text: #111;
  --pill-bg: rgba(0,0,0,0.6);
  --canvas-bg: #efefef;
}

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  background: transparent;
  font-family: 'Poppins', sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #ee0101ff;
  overflow: hidden; /* prevent iframe scrollbars inside parent */
  box-sizing: border-box;
}

/* widget container: centered and transparent (parent overlay provides backdrop) */
.captcha-container {
  position: relative;           /* for absolute-positioned status pills */
  width: 100%;
  max-width: 520px;             /* wider so buttons fit */
  padding: 18px 18px 14px;
  text-align: center;
  background: transparent;      /* remove grey background */
  box-sizing: border-box;
  border-radius: 10px;
  overflow: visible;            /* do not clip children */
}

/* header stays visible */
.captcha-header h1 {
  margin: 0 0 6px;
  font-size: 1.15rem;
  font-weight: 600;
  color: var(--dark-text);
}

/* status indicators positioned over the top — do not consume layout height */
.status-indicators {
  position: absolute;
  top: 8px;
  left: 12px;
  right: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 8px;
  pointer-events: none; /* visual only by default */
  z-index: 5;
}
.status-indicators .status-indicator {
  pointer-events: auto;         /* if you later want clicks */
  background: var(--pill-bg);
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 0.85rem;
  box-shadow: none;
}

/* KEEP the canvas display area intact (400x250). If iframe is narrower it will scale down */
#storyCanvas {
  display: block;
  margin: 8px auto 12px;
  width: 400px;                 /* explicit intended display width */
  height: 230px;                /* explicit intended display height */
  max-width: 100%;              /* scale down on narrow screens */
  max-height: 70vh;             /* safety cap on very small devices */
  border-radius: 8px;
  background-color: var(--canvas-bg);
  box-sizing: border-box;
  border: 2px solid black;
}

/* question / options area */
#questionPanel {
  margin-top: 6px;
  display: block;
}

/* options layout: two-per-row, wrap, allow multiline answers */
.captcha-options {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
  margin-top: 12px;
  width: 100%;
  box-sizing: border-box;
}

.captcha-btn {
  padding: 10px 18px;
  font-size: 0.95rem;
  font-weight: 600;
  border-radius: 6px;
  border: none;
  background: linear-gradient(135deg, #7e57c2, #9575cd);
  color: #fff;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  display: inline-block;
  min-width: 120px;   /* ensures consistency */
}

.captcha-btn:hover {
  background: linear-gradient(135deg, #6a46b1, #8261ee);
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.captcha-btn:active {
  transform: translateY(0);
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}


{% comment %} .captcha-btn {
  flex: 0 1 22%;            /* about 4 per row */
  max-width: 22%;           /* ensure 4 fit side by side */
  min-width: 80px;          /* keep them tappable */
  padding: 8px 10px;
  font-size: 0.9rem;
  border-radius: 8px;
  border: none;
  background: #fff;
  color: #111;
  text-align: center;
  white-space: normal;      /* allow wrapping if text is long */
  word-break: break-word;
  box-sizing: border-box;
} {% endcomment %}

/* result/message styles */
.captcha-result {
  margin-top: 12px;
  font-weight: 600;
  display: block;
}

/* small-screen adjustments — stack buttons full width under 420px */
@media (max-width: 420px) {
  .captcha-container { max-width: 360px; padding: 12px; }
  #storyCanvas { width: 100%; height: auto; } /* scale down if necessary */
  .captcha-btn { flex: 0 1 100%; max-width: 100%; min-width: 0; }
}

  </style>
</head>
<body>
  <div class="captcha-container">
  <div class="captcha-header">
    <h1>VERIFY CAPTCHA</h1>
    <div class="status-indicators">
      <div id="difficulty-indicator" class="status-indicator difficulty-indicator">
        Security Level: <span id="difficulty-level">1</span>/3
      </div>
      <div id="timer-container" class="status-indicator">
        Time remaining: <span id="timer">1:00</span>
      </div>
      <div id="attempts-counter" class="status-indicator">
        Attempts: <span id="attempts-count">0</span>/4
      </div>
    </div>
  </div>

  <div class="captcha-body">
    <canvas id="storyCanvas" width="400" height="250"></canvas>
    <div id="questionPanel">
     <b> <p style="color: black;" id="questionText"></p></b>
      <div id="options" class="captcha-options"></div>
      <div id="resultMessage" class="captcha-result"></div>
    </div>
  </div>
</div>

  <script>
    // Function to get CSRF token from cookies
    function getCSRFToken() {
      const name = 'csrftoken';
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

    class CaptchaSystem {
      constructor() {
        this.elements = {
          canvas: document.getElementById('storyCanvas'),
          questionPanel: document.getElementById('questionPanel'),
          questionText: document.getElementById('questionText'),
          optionsDiv: document.getElementById('options'),
          resultMessage: document.getElementById('resultMessage'),
          difficultyIndicator: document.getElementById('difficulty-level'),
          timerContainer: document.getElementById('timer-container'),
          timerDisplay: document.getElementById('timer'),
          attemptsCounter: document.getElementById('attempts-count')
        };
        
        this.state = {
          difficulty: 1,
          failedAttempts: 0,
          timer: null,
          animationId: null,
          csrfToken: getCSRFToken()
          
        };
        
        // Adjust canvas size for better fit
        this.adjustCanvasSize();
        this.init();
      }

      adjustCanvasSize() {
        // Make canvas responsive
        const containerWidth = this.elements.canvas.parentElement.clientWidth;
        const maxWidth = Math.min(400, containerWidth - 40); // 20px padding on each side
        
        this.elements.canvas.width = maxWidth;
        this.elements.canvas.height = maxWidth * 0.625; // 5:8 aspect ratio
      }

      init() {
        // Hide timer container on first attempt
        this.elements.timerContainer.style.display = 'none';
        
        this.loadCaptcha();
        this.setupEventListeners();
        
        // Handle window resize
        window.addEventListener('resize', () => {
          this.adjustCanvasSize();
          if (this.state.currentChallenge) {
            this.runAnimation(this.state.currentChallenge.animation_data, () => this.showQuestion(this.state.currentChallenge));
          }
        });
      }

      setupEventListeners() {
        // Track user interaction to prevent automated solving
        document.addEventListener('click', this.handleUserInteraction.bind(this), { once: true });
      }

      handleUserInteraction() {
        if (this.state.failedAttempts > 0) {
          this.updateUI();
        }
      }

      async loadCaptcha() {
        try {
          const response = await fetch('/get/', {
            headers: { 
              'X-Difficulty': this.state.difficulty,
              'X-CSRFToken': this.state.csrfToken
            },
            credentials: 'same-origin'
          });
          
          if (response.status === 403) {
            this.showBlockedMessage();
            return;
          }
          
          const data = await response.json();
          this.state.currentChallenge = data;
          this.runAnimation(data.animation_data, () => this.showQuestion(data));
        } catch (error) {
          console.error('CAPTCHA error:', error);
          this.showResult('System error. Please refresh.', false);
        }
      }

      runAnimation(animationData, callback) {
        // Clear any existing animation
        if (this.state.animationId) {
          cancelAnimationFrame(this.state.animationId);
        }
        
        const { canvas } = this.elements;
        const ctx = canvas.getContext('2d');
        const actors = animationData.actors.map(a => ({
          ...a,
          x: -30, // Start further left to account for smaller canvas
          y: canvas.height / 2 + Math.random() * 60 - 30, // Center with some variation
          active: false
        }));
        
        const startTime = Date.now();
        
        const animate = () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = 'rgba(245, 245, 245, 0.7)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          let allDone = true;
          const currentTime = Date.now() - startTime;
          
          actors.forEach(actor => {
            if (currentTime >= actor.delay * 1000) {
              actor.active = true;
              if (actor.x < canvas.width - 30) { // Adjusted for smaller canvas
                // Adjust speed based on difficulty and canvas size
                const speedFactor = canvas.width / 500; // Scale speed based on canvas size
                actor.x += (this.state.difficulty >= 2 ? 3 : 2) * speedFactor;
                allDone = false;
              }
              this.drawActor(ctx, actor);
            } else {
              allDone = false;
            }
          });
          
          if (allDone) {
            this.state.animationId = null;
            setTimeout(callback, 1000);
          } else {
            this.state.animationId = requestAnimationFrame(animate);
          }
        };
        
        this.state.animationId = requestAnimationFrame(animate);
      }

      drawActor(ctx, actor) {
        const radius = Math.min(12, ctx.canvas.width / 35); // Responsive radius
        
        ctx.fillStyle = actor.color;
        ctx.beginPath();
        ctx.arc(actor.x, actor.y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        if (actor.object) {
          const [_, color] = actor.object.split('_');
          ctx.fillStyle = color;
          const size = radius * 1.3;
          ctx.fillRect(actor.x - size/2, actor.y - size * 1.5, size, size);
          
          // Show object label for higher difficulties
          if (this.state.difficulty >0) {
            ctx.fillStyle = "#000000ff";
            ctx.font = `${Math.max(8, radius/2)}px Arial`; // Responsive font
            ctx.fillText(actor.object.split('_')[0], actor.x - size/2, actor.y - size * 1.6);
          }
        }
      }

      showQuestion(data) {
        const { questionText, optionsDiv } = this.elements;
        questionText.textContent = data.question;
        optionsDiv.innerHTML = '';
        
        // Shuffle options but keep correct answer
        const options = [...new Set([...data.options, data.correct_answer])]
          .sort(() => Math.random() - 0.5);
        
        options.forEach(option => {
          const button = document.createElement('button');
          button.className = 'captcha-btn';
          button.textContent = option;
          button.onclick = () => this.verifyAnswer(option === data.correct_answer, data.id);
          optionsDiv.appendChild(button);
        });
        
        this.elements.questionPanel.style.display = 'block';
      }

      async verifyAnswer(isCorrect, challengeId) {
        if (isCorrect) {
            this.showResult("Verification successful! Redirecting...", true);
            this.state.failedAttempts = 0;
            
            try {
                const response = await fetch('/submit/', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRFToken': this.state.csrfToken
                    },
                    body: JSON.stringify({ 
                        id: challengeId, 
                        answer: this.state.currentChallenge.correct_answer 
                    }),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.status === 'passed') {
                    // Notify opener window of success
                    if (window.parent !== window) {
    window.parent.postMessage('captchaSuccess', window.location.origin);
}
                    // Close the CAPTCHA window after a brief delay
                    setTimeout(() => window.close(), 1000);
                } else {
                    this.showResult("Verification failed. Please try again.", false);
                    setTimeout(() => this.loadCaptcha(), 1500);
                }
            } catch (error) {
                console.error('Submission error:', error);
               // this.showResult("Error submitting answer. Please try again.", false);
               

            }
        } else {
            this.state.failedAttempts++;
            this.showResult("Incorrect answer. Please try again.", false);
            
            if (this.state.failedAttempts >= 4) {
                this.showBlockedMessage();
                await this.reportExcessiveAttempts();
                return;
            } else {
                this.state.difficulty = Math.min(3, Math.floor(this.state.failedAttempts / 3) + 1);
                setTimeout(() => this.loadCaptcha(), 1500);
            }
            
            this.updateUI();
        }
      }

      async reportExcessiveAttempts() {
        try {
          await fetch('/report_attempts/', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'X-CSRFToken': this.state.csrfToken
            },
            body: JSON.stringify({ attempts: this.state.failedAttempts })
          });
        } catch (error) {
          console.error('Failed to report attempts:', error);
        }
      }

      updateUI() {
    const difficultySpan = document.getElementById('difficulty-level');
    const attemptsSpan = document.getElementById('attempts-count');
    const timerContainer = this.elements.timerContainer;
    
    // Update only the number spans, not the entire text content
    if (difficultySpan) difficultySpan.textContent = this.state.difficulty;
    if (attemptsSpan) attemptsSpan.textContent = this.state.failedAttempts;
    
    // Only show timer for difficulty levels 2 and 3 (not for level 1)
    if (this.state.difficulty >= 2) {
        timerContainer.style.display = 'block';
        this.startTimer(20);
    } else {
        timerContainer.style.display = 'none';
        clearInterval(this.state.timer);
    }
}

      startTimer(seconds) {
        clearInterval(this.state.timer);
        let timeLeft = seconds;
        this.updateTimer(timeLeft);
        
        this.state.timer = setInterval(() => {
          timeLeft--;
          this.updateTimer(timeLeft);
          
          if (timeLeft <= 0) {
            clearInterval(this.state.timer);
            this.handleTimeout();
          }
        }, 1000);
      }

      updateTimer(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        this.elements.timerDisplay.textContent = `${mins}:${secs < 10 ? '0' : ''}${secs}`;
      }

      handleTimeout() {
        this.state.failedAttempts++;
        this.showResult("Time expired! Loading new challenge...", false);
        this.updateUI();
        setTimeout(() => this.loadCaptcha(), 1500);
      }

      showResult(message, isSuccess) {
        const { resultMessage } = this.elements;
        resultMessage.textContent = message;
        resultMessage.className = `captcha-result ${isSuccess ? 'success' : 'error'}`;
        resultMessage.style.display = 'block';
      }

      showBlockedMessage() {
        this.elements.questionPanel.innerHTML = `
          <div class="blocked-message">
            <h3 style="color: red;">Access Temporarily Blocked</h3>
            <p style="color: red;">Too many incorrect attempts detected.
            For security reasons, you'll need to wait, reload and try again<br></p>
            <p style="color: rgba(212, 220, 243, 0.95)">Try again later</p>
             <p style="color: rgba(212, 220, 243, 0.95);">Try again later</p>
          </div>
        `;  
      }
    }
    
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => new CaptchaSystem());
  </script>
</body>
</html> 
 