<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fixed CAPTCHA Verification</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #6e8efb;
      --primary-dark: #4d76e8;
      --secondary: #a777e3;
      --success: #4CAF50;
      --error: #f44336;
      --dark-bg: rgba(18, 18, 18, 0.85);
      --dark-text: #f8f9fa;
      --light-text: #f8f9fa;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      background: transparent;
      font-family: 'Poppins', sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      color: var(--dark-text);
      padding: 20px;
      position: relative;
      overflow: auto; /* Changed from hidden to auto */
    }
    
    h1 {
      margin-bottom: 20px; /* Reduced margin */
      color: var(--dark-text);
      font-size: 1.8rem; /* Smaller font size */
      text-align: center;
      text-shadow: 0 2px 4px rgba(0,0,0,0.5);
    }
    
        .captcha-header {
      text-align: center;
      margin-bottom: 15px;
      position: relative;
      z-index: 10;
    }

    .captcha-body {
      width: 100%;
    }


    .captcha-container {
       max-height: none;    /* let it expand */
       overflow: visible;   /* no internal scrollbar */
      
      background: rgba(153, 150, 155, 0.9);
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.5);
      padding: 20px; 
      width: 100%;
      max-width: 500px; /* Reduced max width */
      text-align: center;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255,255,255,0.1);
    }
    .status-indicators {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px; /* Reduced margin */
      gap: 8px; /* Reduced gap */
      flex-wrap: wrap;
    }
    
    .status-indicator {
      padding: 6px 10px; /* Reduced padding */
      border-radius: 4px;
      font-weight: bold;
      background: rgba(44, 44, 44, 0.7);
      color: #e0e0e0;
      backdrop-filter: blur(5px);
      font-size: 0.85rem; /* Smaller font */
    }
    
    .difficulty-indicator span {
      color: #6e8efb;
    }
    
    #timer-container {
      background: rgba(51, 41, 0, 0.7);
      color: #ffd54f;
      backdrop-filter: blur(5px);
      display: none;
    }
    
    #attempts-counter {
      background: rgba(44, 44, 44, 0.7);
      color: #e0e0e0;
      backdrop-filter: blur(5px);
    }
    
    #storyCanvas {
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 10px;
      margin: 0 auto 15px; /* Reduced margin */
      display: block;
      background-color: rgba(44, 44, 44, 0.7);
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
      backdrop-filter: blur(5px);
      max-width: 100%; /* Ensure it doesn't overflow */
      height: auto; /* Maintain aspect ratio */
      max-height: 200px; 
    }
    
    #questionPanel {
      display: none;
      margin-top: 10px; 
      animation: fadeIn 0.3s ease;
    }
    
    .captcha-container h1 {
  opacity: 1 !important;
  visibility: visible !important;
  position: relative;
  z-index: 5;
}


    #questionText {
      font-size: 1.1rem; /* Slightly smaller */
      margin-bottom: 15px; /* Reduced margin */
      color: var(--dark-text);
      font-weight: 500;
      line-height: 1.4;
    }
    
    .captcha-options {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 8px; /* Reduced gap */
      margin-bottom: 15px; /* Reduced margin */
    }
    
    .captcha-btn {
      background: var(--primary);
      color: white;
      border: none;
      padding: 10px 15px; /* Reduced padding */
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.2s ease;
      min-width: 80px; /* Reduced min-width */
      box-shadow: 0 3px 6px rgba(110,142,251,0.3);
      font-family: 'Poppins', sans-serif;
      font-size: 0.9rem; /* Smaller font */
      flex: 1; /* Allow buttons to grow */
      max-width: 45%; /* Limit button width */
    }
    
    .captcha-btn:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: 0 5px 12px rgba(110,142,251,0.4);
    }
    
    .captcha-result {
      margin-top: 15px; /* Reduced margin */
      padding: 10px; /* Reduced padding */
      border-radius: 8px;
      display: none;
      font-weight: 500;
      animation: fadeIn 0.3s ease;
      backdrop-filter: blur(5px);
      font-size: 0.9rem; /* Smaller font */
    }
    
    .success {
      background-color: rgba(45, 72, 38, 0.8);
      color: #9fdaa3;
    }
    
    
    .error {
      background-color: rgba(72, 38, 38, 0.8);
      color: #da9f9f;
    }
    
    .blocked-message {
      padding: 15px; /* Reduced padding */
      background: rgba(72, 38, 40, 0.8);
      border: 1px solid rgba(122, 63, 66, 0.5);
      border-radius: 4px;
      margin-top: 15px; /* Reduced margin */
      color: #da9fa2;
      backdrop-filter: blur(5px);
      font-size: 0.9rem; /* Smaller font */
    }
    
    .blocked-message h3 {
      color: #ff5252;
      margin-top: 0;
      font-size: 1.1rem; /* Smaller font */
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @media (max-width: 600px) {
      .captcha-container {
        padding: 15px;
        background: rgba(49, 44, 53, 0.95);
      }
      
      h1 {
        font-size: 1.5rem;
      }
      
      #storyCanvas {
        width: 100%;
        height: auto;
      }
      
      .captcha-options {
        flex-direction: column;
      }
      
      .captcha-btn {
        width: 100%;
        max-width: 100%;
      }
      
      .status-indicators {
        flex-direction: column;
        gap: 5px;
      }
    }

    /* Additional responsive fixes */
    @media (max-width: 400px) {
      html, body {
        padding: 10px;
      }
      
      .captcha-container {
        padding: 15px;
      }
      
      h1 {
        font-size: 1.3rem;
        margin-bottom: 15px;
      }
      
      .status-indicator {
        font-size: 0.8rem;
        padding: 5px 8px;
      }
      
      #questionText {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="captcha-container">
  <div class="captcha-header">
    <h1>Human Verification</h1>
    <div class="status-indicators">
      <div id="difficulty-indicator" class="status-indicator difficulty-indicator">
        Security Level: <span id="difficulty-level">1</span>/3
      </div>
      <div id="timer-container" class="status-indicator">
        Time remaining: <span id="timer">1:00</span>
      </div>
      <div id="attempts-counter" class="status-indicator">
        Attempts: <span id="attempts-count">0</span>/4
      </div>
    </div>
  </div>

  <div class="captcha-body">
    <canvas id="storyCanvas" width="400" height="250"></canvas>
    <div id="questionPanel">
      <p id="questionText"></p>
      <div id="options" class="captcha-options"></div>
      <div id="resultMessage" class="captcha-result"></div>
    </div>
  </div>
</div>

  <script>
    // Function to get CSRF token from cookies
    function getCSRFToken() {
      const name = 'csrftoken';
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

    class CaptchaSystem {
      constructor() {
        this.elements = {
          canvas: document.getElementById('storyCanvas'),
          questionPanel: document.getElementById('questionPanel'),
          questionText: document.getElementById('questionText'),
          optionsDiv: document.getElementById('options'),
          resultMessage: document.getElementById('resultMessage'),
          difficultyIndicator: document.getElementById('difficulty-level'),
          timerContainer: document.getElementById('timer-container'),
          timerDisplay: document.getElementById('timer'),
          attemptsCounter: document.getElementById('attempts-count')
        };
        
        this.state = {
          difficulty: 1,
          failedAttempts: 0,
          timer: null,
          animationId: null,
          csrfToken: getCSRFToken()
        };
        
        // Adjust canvas size for better fit
        this.adjustCanvasSize();
        this.init();
      }

      adjustCanvasSize() {
        // Make canvas responsive
        const containerWidth = this.elements.canvas.parentElement.clientWidth;
        const maxWidth = Math.min(400, containerWidth - 40); // 20px padding on each side
        
        this.elements.canvas.width = maxWidth;
        this.elements.canvas.height = maxWidth * 0.625; // 5:8 aspect ratio
      }

      init() {
        // Hide timer container on first attempt
        this.elements.timerContainer.style.display = 'none';
        
        this.loadCaptcha();
        this.setupEventListeners();
        
        // Handle window resize
        window.addEventListener('resize', () => {
          this.adjustCanvasSize();
          if (this.state.currentChallenge) {
            this.runAnimation(this.state.currentChallenge.animation_data, () => this.showQuestion(this.state.currentChallenge));
          }
        });
      }

      setupEventListeners() {
        // Track user interaction to prevent automated solving
        document.addEventListener('click', this.handleUserInteraction.bind(this), { once: true });
      }

      handleUserInteraction() {
        if (this.state.failedAttempts > 0) {
          this.updateUI();
        }
      }

      async loadCaptcha() {
        try {
          const response = await fetch('/get/', {
            headers: { 
              'X-Difficulty': this.state.difficulty,
              'X-CSRFToken': this.state.csrfToken
            },
            credentials: 'same-origin'
          });
          
          if (response.status === 403) {
            this.showBlockedMessage();
            return;
          }
          
          const data = await response.json();
          this.state.currentChallenge = data;
          this.runAnimation(data.animation_data, () => this.showQuestion(data));
        } catch (error) {
          console.error('CAPTCHA error:', error);
          this.showResult('System error. Please refresh.', false);
        }
      }

      runAnimation(animationData, callback) {
        // Clear any existing animation
        if (this.state.animationId) {
          cancelAnimationFrame(this.state.animationId);
        }
        
        const { canvas } = this.elements;
        const ctx = canvas.getContext('2d');
        const actors = animationData.actors.map(a => ({
          ...a,
          x: -30, // Start further left to account for smaller canvas
          y: canvas.height / 2 + Math.random() * 60 - 30, // Center with some variation
          active: false
        }));
        
        const startTime = Date.now();
        
        const animate = () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = 'rgba(245, 245, 245, 0.7)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          let allDone = true;
          const currentTime = Date.now() - startTime;
          
          actors.forEach(actor => {
            if (currentTime >= actor.delay * 1000) {
              actor.active = true;
              if (actor.x < canvas.width - 30) { // Adjusted for smaller canvas
                // Adjust speed based on difficulty and canvas size
                const speedFactor = canvas.width / 500; // Scale speed based on canvas size
                actor.x += (this.state.difficulty >= 2 ? 3 : 2) * speedFactor;
                allDone = false;
              }
              this.drawActor(ctx, actor);
            } else {
              allDone = false;
            }
          });
          
          if (allDone) {
            this.state.animationId = null;
            setTimeout(callback, 1000);
          } else {
            this.state.animationId = requestAnimationFrame(animate);
          }
        };
        
        this.state.animationId = requestAnimationFrame(animate);
      }

      drawActor(ctx, actor) {
        const radius = Math.min(12, ctx.canvas.width / 35); // Responsive radius
        
        ctx.fillStyle = actor.color;
        ctx.beginPath();
        ctx.arc(actor.x, actor.y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        if (actor.object) {
          const [_, color] = actor.object.split('_');
          ctx.fillStyle = color;
          const size = radius * 1.3;
          ctx.fillRect(actor.x - size/2, actor.y - size * 1.5, size, size);
          
          // Show object label for higher difficulties
          if (this.state.difficulty >= 2) {
            ctx.fillStyle = "#000";
            ctx.font = `${Math.max(8, radius/2)}px Arial`; // Responsive font
            ctx.fillText(actor.object.split('_')[0], actor.x - size/2, actor.y - size * 1.6);
          }
        }
      }

      showQuestion(data) {
        const { questionText, optionsDiv } = this.elements;
        questionText.textContent = data.question;
        optionsDiv.innerHTML = '';
        
        // Shuffle options but keep correct answer
        const options = [...new Set([...data.options, data.correct_answer])]
          .sort(() => Math.random() - 0.5);
        
        options.forEach(option => {
          const button = document.createElement('button');
          button.className = 'captcha-btn';
          button.textContent = option;
          button.onclick = () => this.verifyAnswer(option === data.correct_answer, data.id);
          optionsDiv.appendChild(button);
        });
        
        this.elements.questionPanel.style.display = 'block';
      }

      async verifyAnswer(isCorrect, challengeId) {
        if (isCorrect) {
            this.showResult("Verification successful! Redirecting...", true);
            this.state.failedAttempts = 0;
            
            try {
                const response = await fetch('/submit/', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRFToken': this.state.csrfToken
                    },
                    body: JSON.stringify({ 
                        id: challengeId, 
                        answer: this.state.currentChallenge.correct_answer 
                    }),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.status === 'passed') {
                    // Notify opener window of success
                    if (window.parent !== window) {
    window.parent.postMessage('captchaSuccess', window.location.origin);
}
                    // Close the CAPTCHA window after a brief delay
                    setTimeout(() => window.close(), 1000);
                } else {
                    this.showResult("Verification failed. Please try again.", false);
                    setTimeout(() => this.loadCaptcha(), 1500);
                }
            } catch (error) {
                console.error('Submission error:', error);
                this.showResult("Error submitting answer. Please try again.", false);
            }
        } else {
            this.state.failedAttempts++;
            this.showResult("Incorrect answer. Please try again.", false);
            
            if (this.state.failedAttempts >= 4) {
                this.showBlockedMessage();
                await this.reportExcessiveAttempts();
            } else {
                this.state.difficulty = Math.min(3, Math.floor(this.state.failedAttempts / 3) + 1);
                setTimeout(() => this.loadCaptcha(), 1500);
            }
            
            this.updateUI();
        }
      }

      async reportExcessiveAttempts() {
        try {
          await fetch('/report_attempts/', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'X-CSRFToken': this.state.csrfToken
            },
            body: JSON.stringify({ attempts: this.state.failedAttempts })
          });
        } catch (error) {
          console.error('Failed to report attempts:', error);
        }
      }

      updateUI() {
    const difficultySpan = document.getElementById('difficulty-level');
    const attemptsSpan = document.getElementById('attempts-count');
    const timerContainer = this.elements.timerContainer;
    
    // Update only the number spans, not the entire text content
    if (difficultySpan) difficultySpan.textContent = this.state.difficulty;
    if (attemptsSpan) attemptsSpan.textContent = this.state.failedAttempts;
    
    // Only show timer for difficulty levels 2 and 3 (not for level 1)
    if (this.state.difficulty >= 2) {
        timerContainer.style.display = 'block';
        this.startTimer(20);
    } else {
        timerContainer.style.display = 'none';
        clearInterval(this.state.timer);
    }
}

      startTimer(seconds) {
        clearInterval(this.state.timer);
        let timeLeft = seconds;
        this.updateTimer(timeLeft);
        
        this.state.timer = setInterval(() => {
          timeLeft--;
          this.updateTimer(timeLeft);
          
          if (timeLeft <= 0) {
            clearInterval(this.state.timer);
            this.handleTimeout();
          }
        }, 1000);
      }

      updateTimer(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        this.elements.timerDisplay.textContent = `${mins}:${secs < 10 ? '0' : ''}${secs}`;
      }

      handleTimeout() {
        this.state.failedAttempts++;
        this.showResult("Time expired! Loading new challenge...", false);
        this.updateUI();
        setTimeout(() => this.loadCaptcha(), 1500);
      }

      showResult(message, isSuccess) {
        const { resultMessage } = this.elements;
        resultMessage.textContent = message;
        resultMessage.className = `captcha-result ${isSuccess ? 'success' : 'error'}`;
        resultMessage.style.display = 'block';
      }

      showBlockedMessage() {
        this.elements.questionPanel.innerHTML = `
          <div class="blocked-message">
            <h3>Access Temporarily Blocked</h3>
            <p>Too many incorrect attempts detected.</p>
            <p>For security reasons, you'll need to:</p>
            <ul>
              <li>Wait, reload and try again, or</li>
              <li>Contact support if this is a mistake</li>
            </ul>
          </div>
        `;
      }
    }
    
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => new CaptchaSystem());
  </script>
</body>
</html>




















<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fixed CAPTCHA Verification</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
:root{
  --dark-text: #111;
  --pill-bg: rgba(0,0,0,0.6);
  --canvas-bg: #efefef;
}

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  background: transparent;
  font-family: 'Poppins', sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #ee0101ff;
  overflow: hidden; /* prevent iframe scrollbars inside parent */
  box-sizing: border-box;
}

/* widget container: centered and transparent (parent overlay provides backdrop) */
.captcha-container {
  position: relative;           /* for absolute-positioned status pills */
  width: 100%;
  max-width: 520px;             /* wider so buttons fit */
  padding: 18px 18px 14px;
  text-align: center;
  background: transparent;      /* remove grey background */
  box-sizing: border-box;
  border-radius: 10px;
  overflow: visible;            /* do not clip children */
}

/* header stays visible */
.captcha-header h1 {
  margin: 0 0 6px;
  font-size: 1.15rem;
  font-weight: 600;
  color: var(--dark-text);
}

/* status indicators positioned over the top — do not consume layout height */
.status-indicators {
  position: absolute;
  top: 8px;
  left: 12px;
  right: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 8px;
  pointer-events: none; /* visual only by default */
  z-index: 5;
}
.status-indicators .status-indicator {
  pointer-events: auto;         /* if you later want clicks */
  background: var(--pill-bg);
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 0.85rem;
  box-shadow: none;
}

/* KEEP the canvas display area intact (400x250). If iframe is narrower it will scale down */
#storyCanvas {
  display: block;
  margin: 8px auto 12px;
  width: 400px;                 /* explicit intended display width */
  height: 230px;                /* explicit intended display height */
  max-width: 100%;              /* scale down on narrow screens */
  max-height: 70vh;             /* safety cap on very small devices */
  border-radius: 8px;
  background-color: var(--canvas-bg);
  box-sizing: border-box;
  border: 2px solid black;
}

/* question / options area */
#questionPanel {
  margin-top: 6px;
  display: block;
}

/* options layout: two-per-row, wrap, allow multiline answers */
.captcha-options {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
  margin-top: 12px;
  width: 100%;
  box-sizing: border-box;
}
.captcha-btn {
  flex: 0 1 22%;            /* about 4 per row */
  max-width: 22%;           /* ensure 4 fit side by side */
  min-width: 80px;          /* keep them tappable */
  padding: 8px 10px;
  font-size: 0.9rem;
  border-radius: 8px;
  border: none;
  background: #fff;
  color: #111;
  text-align: center;
  white-space: normal;      /* allow wrapping if text is long */
  word-break: break-word;
  box-sizing: border-box;
}

/* result/message styles */
.captcha-result {
  margin-top: 12px;
  font-weight: 600;
  display: block;
}

/* small-screen adjustments — stack buttons full width under 420px */
@media (max-width: 420px) {
  .captcha-container { max-width: 360px; padding: 12px; }
  #storyCanvas { width: 100%; height: auto; } /* scale down if necessary */
  .captcha-btn { flex: 0 1 100%; max-width: 100%; min-width: 0; }
}

  </style>
</head>
<body>
  <div class="captcha-container">
  <div class="captcha-header">
    <h1>HUMAN VERIFICATION</h1>
    <div class="status-indicators">
      <div id="difficulty-indicator" class="status-indicator difficulty-indicator">
        Security Level: <span id="difficulty-level">1</span>/3
      </div>
      <div id="timer-container" class="status-indicator">
        Time remaining: <span id="timer">1:00</span>
      </div>
      <div id="attempts-counter" class="status-indicator">
        Attempts: <span id="attempts-count">0</span>/4
      </div>
    </div>
  </div>

  <div class="captcha-body">
    <canvas id="storyCanvas" width="400" height="250"></canvas>
    <div id="questionPanel">
     <b> <p style="color: black;" id="questionText"></p></b>
      <div id="options" class="captcha-options"></div>
      <div id="resultMessage" class="captcha-result"></div>
    </div>
  </div>
</div>

  <script>
    // Function to get CSRF token from cookies
    function getCSRFToken() {
      const name = 'csrftoken';
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

    class CaptchaSystem {
      constructor() {
        this.elements = {
          canvas: document.getElementById('storyCanvas'),
          questionPanel: document.getElementById('questionPanel'),
          questionText: document.getElementById('questionText'),
          optionsDiv: document.getElementById('options'),
          resultMessage: document.getElementById('resultMessage'),
          difficultyIndicator: document.getElementById('difficulty-level'),
          timerContainer: document.getElementById('timer-container'),
          timerDisplay: document.getElementById('timer'),
          attemptsCounter: document.getElementById('attempts-count')
        };
        
        this.state = {
          difficulty: 1,
          failedAttempts: 0,
          timer: null,
          animationId: null,
          csrfToken: getCSRFToken()
          
        };
        
        // Adjust canvas size for better fit
        this.adjustCanvasSize();
        this.init();
      }

      adjustCanvasSize() {
        // Make canvas responsive
        const containerWidth = this.elements.canvas.parentElement.clientWidth;
        const maxWidth = Math.min(400, containerWidth - 40); // 20px padding on each side
        
        this.elements.canvas.width = maxWidth;
        this.elements.canvas.height = maxWidth * 0.625; // 5:8 aspect ratio
      }

      init() {
        // Hide timer container on first attempt
        this.elements.timerContainer.style.display = 'none';
        
        this.loadCaptcha();
        this.setupEventListeners();
        
        // Handle window resize
        window.addEventListener('resize', () => {
          this.adjustCanvasSize();
          if (this.state.currentChallenge) {
            this.runAnimation(this.state.currentChallenge.animation_data, () => this.showQuestion(this.state.currentChallenge));
          }
        });
      }

      setupEventListeners() {
        // Track user interaction to prevent automated solving
        document.addEventListener('click', this.handleUserInteraction.bind(this), { once: true });
      }

      handleUserInteraction() {
        if (this.state.failedAttempts > 0) {
          this.updateUI();
        }
      }

      async loadCaptcha() {
        try {
          const response = await fetch('/get/', {
            headers: { 
              'X-Difficulty': this.state.difficulty,
              'X-CSRFToken': this.state.csrfToken
            },
            credentials: 'same-origin'
          });
          
          if (response.status === 403) {
            this.showBlockedMessage();
            return;
          }
          
          const data = await response.json();
          this.state.currentChallenge = data;
          this.runAnimation(data.animation_data, () => this.showQuestion(data));
        } catch (error) {
          console.error('CAPTCHA error:', error);
          this.showResult('System error. Please refresh.', false);
        }
      }

      runAnimation(animationData, callback) {
        // Clear any existing animation
        if (this.state.animationId) {
          cancelAnimationFrame(this.state.animationId);
        }
        
        const { canvas } = this.elements;
        const ctx = canvas.getContext('2d');
        const actors = animationData.actors.map(a => ({
          ...a,
          x: -30, // Start further left to account for smaller canvas
          y: canvas.height / 2 + Math.random() * 60 - 30, // Center with some variation
          active: false
        }));
        
        const startTime = Date.now();
        
        const animate = () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = 'rgba(245, 245, 245, 0.7)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          let allDone = true;
          const currentTime = Date.now() - startTime;
          
          actors.forEach(actor => {
            if (currentTime >= actor.delay * 1000) {
              actor.active = true;
              if (actor.x < canvas.width - 30) { // Adjusted for smaller canvas
                // Adjust speed based on difficulty and canvas size
                const speedFactor = canvas.width / 500; // Scale speed based on canvas size
                actor.x += (this.state.difficulty >= 2 ? 3 : 2) * speedFactor;
                allDone = false;
              }
              this.drawActor(ctx, actor);
            } else {
              allDone = false;
            }
          });
          
          if (allDone) {
            this.state.animationId = null;
            setTimeout(callback, 1000);
          } else {
            this.state.animationId = requestAnimationFrame(animate);
          }
        };
        
        this.state.animationId = requestAnimationFrame(animate);
      }

      drawActor(ctx, actor) {
        const radius = Math.min(12, ctx.canvas.width / 35); // Responsive radius
        
        ctx.fillStyle = actor.color;
        ctx.beginPath();
        ctx.arc(actor.x, actor.y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        if (actor.object) {
          const [_, color] = actor.object.split('_');
          ctx.fillStyle = color;
          const size = radius * 1.3;
          ctx.fillRect(actor.x - size/2, actor.y - size * 1.5, size, size);
          
          // Show object label for higher difficulties
          if (this.state.difficulty >= 2) {
            ctx.fillStyle = "#000";
            ctx.font = `${Math.max(8, radius/2)}px Arial`; // Responsive font
            ctx.fillText(actor.object.split('_')[0], actor.x - size/2, actor.y - size * 1.6);
          }
        }
      }

      showQuestion(data) {
        const { questionText, optionsDiv } = this.elements;
        questionText.textContent = data.question;
        optionsDiv.innerHTML = '';
        
        // Shuffle options but keep correct answer
        const options = [...new Set([...data.options, data.correct_answer])]
          .sort(() => Math.random() - 0.5);
        
        options.forEach(option => {
          const button = document.createElement('button');
          button.className = 'captcha-btn';
          button.textContent = option;
          button.onclick = () => this.verifyAnswer(option === data.correct_answer, data.id);
          optionsDiv.appendChild(button);
        });
        
        this.elements.questionPanel.style.display = 'block';
      }

      async verifyAnswer(isCorrect, challengeId) {
        if (isCorrect) {
            this.showResult("Verification successful! Redirecting...", true);
            this.state.failedAttempts = 0;
            
            try {
                const response = await fetch('/submit/', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRFToken': this.state.csrfToken
                    },
                    body: JSON.stringify({ 
                        id: challengeId, 
                        answer: this.state.currentChallenge.correct_answer 
                    }),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.status === 'passed') {
                    // Notify opener window of success
                    if (window.parent !== window) {
    window.parent.postMessage('captchaSuccess', window.location.origin);
}
                    // Close the CAPTCHA window after a brief delay
                    setTimeout(() => window.close(), 1000);
                } else {
                    this.showResult("Verification failed. Please try again.", false);
                    setTimeout(() => this.loadCaptcha(), 1500);
                }
            } catch (error) {
                console.error('Submission error:', error);
               // this.showResult("Error submitting answer. Please try again.", false);
               

            }
        } else {
            this.state.failedAttempts++;
            this.showResult("Incorrect answer. Please try again.", false);
            
            if (this.state.failedAttempts >= 4) {
                this.showBlockedMessage();
                await this.reportExcessiveAttempts();
                return;
            } else {
                this.state.difficulty = Math.min(3, Math.floor(this.state.failedAttempts / 3) + 1);
                setTimeout(() => this.loadCaptcha(), 1500);
            }
            
            this.updateUI();
        }
      }

      async reportExcessiveAttempts() {
        try {
          await fetch('/report_attempts/', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'X-CSRFToken': this.state.csrfToken
            },
            body: JSON.stringify({ attempts: this.state.failedAttempts })
          });
        } catch (error) {
          console.error('Failed to report attempts:', error);
        }
      }

      updateUI() {
    const difficultySpan = document.getElementById('difficulty-level');
    const attemptsSpan = document.getElementById('attempts-count');
    const timerContainer = this.elements.timerContainer;
    
    // Update only the number spans, not the entire text content
    if (difficultySpan) difficultySpan.textContent = this.state.difficulty;
    if (attemptsSpan) attemptsSpan.textContent = this.state.failedAttempts;
    
    // Only show timer for difficulty levels 2 and 3 (not for level 1)
    if (this.state.difficulty >= 2) {
        timerContainer.style.display = 'block';
        this.startTimer(20);
    } else {
        timerContainer.style.display = 'none';
        clearInterval(this.state.timer);
    }
}

      startTimer(seconds) {
        clearInterval(this.state.timer);
        let timeLeft = seconds;
        this.updateTimer(timeLeft);
        
        this.state.timer = setInterval(() => {
          timeLeft--;
          this.updateTimer(timeLeft);
          
          if (timeLeft <= 0) {
            clearInterval(this.state.timer);
            this.handleTimeout();
          }
        }, 1000);
      }

      updateTimer(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        this.elements.timerDisplay.textContent = `${mins}:${secs < 10 ? '0' : ''}${secs}`;
      }

      handleTimeout() {
        this.state.failedAttempts++;
        this.showResult("Time expired! Loading new challenge...", false);
        this.updateUI();
        setTimeout(() => this.loadCaptcha(), 1500);
      }

      showResult(message, isSuccess) {
        const { resultMessage } = this.elements;
        resultMessage.textContent = message;
        resultMessage.className = `captcha-result ${isSuccess ? 'success' : 'error'}`;
        resultMessage.style.display = 'block';
      }

      showBlockedMessage() {
        this.elements.questionPanel.innerHTML = `
          <div class="blocked-message">
            <h3 style="color: red;">Access Temporarily Blocked</h3>
            <p style="color: red;">Too many incorrect attempts detected.
            For security reasons, you'll need to wait, reload and try again<br></p>
            <p style="color: rgba(212, 220, 243, 0.95)">This is a red paragraph.</p>
             <p style="color: rgba(212, 220, 243, 0.95);">This is a red paragraph.</p>
          </div>
        `;
      }
    }
    
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => new CaptchaSystem());
  </script>
</body>
</html>































{% comment %} <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fixed CAPTCHA Verification</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
:root{
  --dark-text: #111;
  --pill-bg: rgba(0,0,0,0.6);
  --canvas-bg: #efefef;
}

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  background: transparent;
  font-family: 'Poppins', sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #ee0101ff;
  overflow: hidden; /* prevent iframe scrollbars inside parent */
  box-sizing: border-box;
}

/* widget container: centered and transparent (parent overlay provides backdrop) */
.captcha-container {
  position: relative;           /* for absolute-positioned status pills */
  width: 100%;
  max-width: 520px;             /* wider so buttons fit */
  padding: 18px 18px 14px;
  text-align: center;
  background: transparent;      /* remove grey background */
  box-sizing: border-box;
  border-radius: 10px;
  overflow: visible;            /* do not clip children */
}

/* header stays visible */
.captcha-header h1 {
  margin: 0 0 6px;
  font-size: 1.15rem;
  font-weight: 600;
  color: var(--dark-text);
}

/* status indicators positioned over the top — do not consume layout height */
.status-indicators {
  position: absolute;
  top: 8px;
  left: 12px;
  right: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 8px;
  pointer-events: none; /* visual only by default */
  z-index: 5;
}
.status-indicators .status-indicator {
  pointer-events: auto;         /* if you later want clicks */
  background: var(--pill-bg);
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 0.85rem;
  box-shadow: none;
}

/* KEEP the canvas display area intact (400x250). If iframe is narrower it will scale down */
#storyCanvas {
  display: block;
  margin: 8px auto 12px;
  width: 400px;                 /* explicit intended display width */
  height: 230px;                /* explicit intended display height */
  max-width: 100%;              /* scale down on narrow screens */
  max-height: 70vh;             /* safety cap on very small devices */
  border-radius: 8px;
  background-color: var(--canvas-bg);
  box-sizing: border-box;
  border: 2px solid black;
}

/* question / options area */
#questionPanel {
  margin-top: 6px;
  display: block;
}

/* options layout: two-per-row, wrap, allow multiline answers */
.captcha-options {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
  margin-top: 12px;
  width: 100%;
  box-sizing: border-box;
}
.captcha-btn {
  flex: 0 1 22%;            /* about 4 per row */
  max-width: 22%;           /* ensure 4 fit side by side */
  min-width: 80px;          /* keep them tappable */
  padding: 8px 10px;
  font-size: 0.9rem;
  border-radius: 8px;
  border: none;
  background: #fff;
  color: #111;
  text-align: center;
  white-space: normal;      /* allow wrapping if text is long */
  word-break: break-word;
  box-sizing: border-box;
}

/* result/message styles */
.captcha-result {
  margin-top: 12px;
  font-weight: 600;
  display: block;
}

/* small-screen adjustments — stack buttons full width under 420px */
@media (max-width: 420px) {
  .captcha-container { max-width: 360px; padding: 12px; }
  #storyCanvas { width: 100%; height: auto; } /* scale down if necessary */
  .captcha-btn { flex: 0 1 100%; max-width: 100%; min-width: 0; }
}

  </style>
</head>
<body>
  <div class="captcha-container">
  <div class="captcha-header">
    <h1>HUMAN VERIFICATION</h1>
    <div class="status-indicators">
      <div id="difficulty-indicator" class="status-indicator difficulty-indicator">
        Security Level: <span id="difficulty-level">1</span>/3
      </div>
      <div id="timer-container" class="status-indicator">
        Time remaining: <span id="timer">1:00</span>
      </div>
      <div id="attempts-counter" class="status-indicator">
        Attempts: <span id="attempts-count">0</span>/4
      </div>
    </div>
  </div>

  <div class="captcha-body">
    <canvas id="storyCanvas" width="400" height="250"></canvas>
    <div id="questionPanel">
     <b> <p style="color: black;" id="questionText"></p></b>
      <div id="options" class="captcha-options"></div>
      <div id="resultMessage" class="captcha-result"></div>
    </div>
  </div>
</div>

  <script>
    // Function to get CSRF token from cookies
    function getCSRFToken() {
      const name = 'csrftoken';
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

    class CaptchaSystem {
      constructor() {
        this.elements = {
          canvas: document.getElementById('storyCanvas'),
          questionPanel: document.getElementById('questionPanel'),
          questionText: document.getElementById('questionText'),
          optionsDiv: document.getElementById('options'),
          resultMessage: document.getElementById('resultMessage'),
          difficultyIndicator: document.getElementById('difficulty-level'),
          timerContainer: document.getElementById('timer-container'),
          timerDisplay: document.getElementById('timer'),
          attemptsCounter: document.getElementById('attempts-count')
        };
        
        this.state = {
          difficulty: 1,
          failedAttempts: 0,
          timer: null,
          animationId: null,
          csrfToken: getCSRFToken()
          
        };
        
        // Adjust canvas size for better fit
        this.adjustCanvasSize();
        this.init();
      }

      adjustCanvasSize() {
        // Make canvas responsive
        const containerWidth = this.elements.canvas.parentElement.clientWidth;
        const maxWidth = Math.min(400, containerWidth - 40); // 20px padding on each side
        
        this.elements.canvas.width = maxWidth;
        this.elements.canvas.height = maxWidth * 0.625; // 5:8 aspect ratio
      }

      init() {
        // Hide timer container on first attempt
        this.elements.timerContainer.style.display = 'none';
        
        this.loadCaptcha();
        this.setupEventListeners();
        
        // Handle window resize
        window.addEventListener('resize', () => {
          this.adjustCanvasSize();
          if (this.state.currentChallenge) {
            this.runAnimation(this.state.currentChallenge.animation_data, () => this.showQuestion(this.state.currentChallenge));
          }
        });
      }

      setupEventListeners() {
        // Track user interaction to prevent automated solving
        document.addEventListener('click', this.handleUserInteraction.bind(this), { once: true });
      }

      handleUserInteraction() {
        if (this.state.failedAttempts > 0) {
          this.updateUI();
        }
      }

      async loadCaptcha() {
        try {
          const response = await fetch('/get/', {
            headers: { 
              'X-Difficulty': this.state.difficulty,
              'X-CSRFToken': this.state.csrfToken
            },
            credentials: 'same-origin'
          });
          
          if (response.status === 403) {
            this.showBlockedMessage();
            return;
          }
          
          const data = await response.json();
          this.state.currentChallenge = data;
          this.runAnimation(data.animation_data, () => this.showQuestion(data));
        } catch (error) {
          console.error('CAPTCHA error:', error);
          this.showResult('System error. Please refresh.', false);
        }
      }

      runAnimation(animationData, callback) {
        // Clear any existing animation
        if (this.state.animationId) {
          cancelAnimationFrame(this.state.animationId);
        }
        
        const { canvas } = this.elements;
        const ctx = canvas.getContext('2d');
        const actors = animationData.actors.map(a => ({
          ...a,
          x: -30, // Start further left to account for smaller canvas
          y: canvas.height / 2 + Math.random() * 60 - 30, // Center with some variation
          active: false
        }));
        
        const startTime = Date.now();
        
        const animate = () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = 'rgba(245, 245, 245, 0.7)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          let allDone = true;
          const currentTime = Date.now() - startTime;
          
          actors.forEach(actor => {
            if (currentTime >= actor.delay * 1000) {
              actor.active = true;
              if (actor.x < canvas.width - 30) { // Adjusted for smaller canvas
                // Adjust speed based on difficulty and canvas size
                const speedFactor = canvas.width / 500; // Scale speed based on canvas size
                actor.x += (this.state.difficulty >= 2 ? 3 : 2) * speedFactor;
                allDone = false;
              }
              this.drawActor(ctx, actor);
            } else {
              allDone = false;
            }
          });
          
          if (allDone) {
            this.state.animationId = null;
            setTimeout(callback, 1000);
          } else {
            this.state.animationId = requestAnimationFrame(animate);
          }
        };
        
        this.state.animationId = requestAnimationFrame(animate);
      }

      drawActor(ctx, actor) {
        const radius = Math.min(12, ctx.canvas.width / 35); // Responsive radius
        
        ctx.fillStyle = actor.color;
        ctx.beginPath();
        ctx.arc(actor.x, actor.y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        if (actor.object) {
          const [_, color] = actor.object.split('_');
          ctx.fillStyle = color;
          const size = radius * 1.3;
          ctx.fillRect(actor.x - size/2, actor.y - size * 1.5, size, size);
          
          // Show object label for higher difficulties
          if (this.state.difficulty >= 2) {
            ctx.fillStyle = "#000";
            ctx.font = `${Math.max(8, radius/2)}px Arial`; // Responsive font
            ctx.fillText(actor.object.split('_')[0], actor.x - size/2, actor.y - size * 1.6);
          }
        }
      }

      showQuestion(data) {
        const { questionText, optionsDiv } = this.elements;
        questionText.textContent = data.question;
        optionsDiv.innerHTML = '';
        
        // Shuffle options but keep correct answer
        const options = [...new Set([...data.options, data.correct_answer])]
          .sort(() => Math.random() - 0.5);
        
        options.forEach(option => {
          const button = document.createElement('button');
          button.className = 'captcha-btn';
          button.textContent = option;
          button.onclick = () => this.verifyAnswer(option === data.correct_answer, data.id);
          optionsDiv.appendChild(button);
        });
        
        this.elements.questionPanel.style.display = 'block';
      }

      async verifyAnswer(isCorrect, challengeId) {
        if (isCorrect) {
            this.showResult("Verification successful! Redirecting...", true);
            this.state.failedAttempts = 0;
            
            try {
                const response = await fetch('/submit/', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRFToken': this.state.csrfToken
                    },
                    body: JSON.stringify({ 
                        id: challengeId, 
                        answer: this.state.currentChallenge.correct_answer 
                    }),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.status === 'passed') {
                    // Notify opener window of success
                    if (window.parent !== window) {
    window.parent.postMessage('captchaSuccess', window.location.origin);
}
                    // Close the CAPTCHA window after a brief delay
                    setTimeout(() => window.close(), 1000);
                } else {
                    this.showResult("Verification failed. Please try again.", false);
                    setTimeout(() => this.loadCaptcha(), 1500);
                }
            } catch (error) {
                console.error('Submission error:', error);
               // this.showResult("Error submitting answer. Please try again.", false);
               

            }
        } else {
            this.state.failedAttempts++;
            this.showResult("Incorrect answer. Please try again.", false);
            
            if (this.state.failedAttempts >= 4) {
                this.showBlockedMessage();
                await this.reportExcessiveAttempts();
                return;
            } else {
                this.state.difficulty = Math.min(3, Math.floor(this.state.failedAttempts / 3) + 1);
                setTimeout(() => this.loadCaptcha(), 1500);
            }
            
            this.updateUI();
        }
      }

      async reportExcessiveAttempts() {
        try {
          await fetch('/report_attempts/', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'X-CSRFToken': this.state.csrfToken
            },
            body: JSON.stringify({ attempts: this.state.failedAttempts })
          });
        } catch (error) {
          console.error('Failed to report attempts:', error);
        }
      }

      updateUI() {
    const difficultySpan = document.getElementById('difficulty-level');
    const attemptsSpan = document.getElementById('attempts-count');
    const timerContainer = this.elements.timerContainer;
    
    // Update only the number spans, not the entire text content
    if (difficultySpan) difficultySpan.textContent = this.state.difficulty;
    if (attemptsSpan) attemptsSpan.textContent = this.state.failedAttempts;
    
    // Only show timer for difficulty levels 2 and 3 (not for level 1)
    if (this.state.difficulty >= 2) {
        timerContainer.style.display = 'block';
        this.startTimer(20);
    } else {
        timerContainer.style.display = 'none';
        clearInterval(this.state.timer);
    }
}

      startTimer(seconds) {
        clearInterval(this.state.timer);
        let timeLeft = seconds;
        this.updateTimer(timeLeft);
        
        this.state.timer = setInterval(() => {
          timeLeft--;
          this.updateTimer(timeLeft);
          
          if (timeLeft <= 0) {
            clearInterval(this.state.timer);
            this.handleTimeout();
          }
        }, 1000);
      }

      updateTimer(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        this.elements.timerDisplay.textContent = `${mins}:${secs < 10 ? '0' : ''}${secs}`;
      }

      handleTimeout() {
        this.state.failedAttempts++;
        this.showResult("Time expired! Loading new challenge...", false);
        this.updateUI();
        setTimeout(() => this.loadCaptcha(), 1500);
      }

      showResult(message, isSuccess) {
        const { resultMessage } = this.elements;
        resultMessage.textContent = message;
        resultMessage.className = `captcha-result ${isSuccess ? 'success' : 'error'}`;
        resultMessage.style.display = 'block';
      }

      showBlockedMessage() {
        this.elements.questionPanel.innerHTML = `
          <div class="blocked-message">
            <h3 style="color: red;">Access Temporarily Blocked</h3>
            <p style="color: red;">Too many incorrect attempts detected.
            For security reasons, you'll need to wait, reload and try again<br></p>
            <p style="color: rgba(212, 220, 243, 0.95)">Try again later</p>
             <p style="color: rgba(212, 220, 243, 0.95);">Try again later</p>
          </div>
        `;  
      }
    }
    
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => new CaptchaSystem());
  </script>
</body>
</html> {% endcomment %}




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Standard CAPTCHA Verification</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
   :root {
  --dark-text: #222;
  --pill-bg: linear-gradient(135deg, #6e8efb, #a777e3);
  --canvas-bg: #fdfdfd;
  --btn-bg: linear-gradient(135deg, #43e97b, #38f9d7);
  --btn-hover: linear-gradient(135deg, #38f9d7, #43e97b);
  --error: #e63946;
  --success: #2ecc71;
}

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  background: linear-gradient(135deg, #f9f9f9, #ececec);
  font-family: 'Poppins', sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--dark-text);
  overflow: hidden;
  box-sizing: border-box;
}

/* Container */
.captcha-container {
  position: relative;
  width: 100%;
  max-width: 520px;
  padding: 18px 18px 14px;
  text-align: center;
  background: rgba(255,255,255,0.15);
  border-radius: 12px;
  backdrop-filter: blur(12px);
  box-shadow: 0 12px 28px rgba(0,0,0,0.2);
  overflow: visible;
  transition: box-shadow 0.3s;
}

.captcha-container:hover {
  box-shadow: 0 14px 36px rgba(0, 0, 0, 0.3);
}

/* Heading */
.captcha-header h1 {
  margin: 0 0 8px;
  font-size: 1.2rem;
  font-weight: 700;
  background: linear-gradient(135deg, #6e8efb, #a777e3);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* Status indicators */
.status-indicators {
  position: absolute;
  top: 8px;
  left: 12px;
  right: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 8px;
  z-index: 5;
}

.status-indicators .status-indicator {
  background: var(--pill-bg);
  color: #fff;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
  transition: transform 0.2s;
}

.status-indicators .status-indicator:hover {
  transform: scale(1.05);
}

/* Canvas */
#storyCanvas {
  display: block;
  margin: 12px auto;
  width: 400px;
  height: 230px;
  border-radius: 10px;
  background-color: var(--canvas-bg);
  border: 1px solid #000; /* Thin black border as requested */
  box-shadow: 0 6px 18px rgba(0,0,0,0.1);
  transition: box-shadow 0.3s;
}

#storyCanvas:hover {
  box-shadow: 0 8px 24px rgba(0,0,0,0.15);
}

/* Question text */
#questionText {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 8px;
  color: #111;
}

/* Options buttons */
.captcha-options {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
  margin-top: 10px;
  width: 100%;
}

.captcha-btn {
  flex: 0 1 22%;
  max-width: 22%;
  min-width: 80px;
  padding: 8px 10px;
  font-size: 0.9rem;
  border-radius: 8px;
  border: none;
  background: var(--btn-bg);
  color: #fff;
  font-weight: 600;
  cursor: pointer;
  box-shadow: 0 3px 8px rgba(0,0,0,0.2);
  transition: transform 0.2s, box-shadow 0.2s, background 0.3s;
}

.captcha-btn:hover {
  background: var(--btn-hover);
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.25);
}

/* Result messages */
.captcha-result {
  margin-top: 12px;
  font-weight: 600;
  display: block;
  transition: color 0.3s ease;
}

.captcha-result.success {
  color: var(--success);
}

.captcha-result.error {
  color: var(--error);
}

/* Blocked message */
.blocked-message {
  padding: 16px;
  border-radius: 10px;
  background: rgba(255, 0, 0, 0.08);
  color: var(--error);
  font-weight: 600;
  box-shadow: inset 0 0 8px rgba(0,0,0,0.1);
}

/* Small screen */
@media (max-width: 420px) {
  .captcha-container { max-width: 360px; padding: 12px; }
  #storyCanvas { width: 100%; height: auto; }
  .captcha-btn { flex: 0 1 100%; max-width: 100%; min-width: 0; }
}

  </style>
</head>
<body>
  <div class="captcha-container"> 
    <div class="captcha-header">
      <div class="verification-header">HUMAN VERIFICATION</div>
      <div class="status-indicators">
        <div id="difficulty-indicator" class="status-indicator difficulty-indicator">
          Security Level: <span id="difficulty-level">1</span>/3
        </div>
        <div id="timer-container" class="status-indicator">
          Time remaining: <span id="timer">1:00</span>
        </div>
        <div id="attempts-counter" class="status-indicator">
          Attempts: <span id="attempts-count">0</span>/4
        </div>
      </div>
    </div>

    <div class="captcha-body">
      <canvas id="storyCanvas" width="400" height="250"></canvas>
      <div id="questionPanel">
        <p id="questionText"></p>
        <div id="options" class="captcha-options"></div>
        <div id="resultMessage" class="captcha-result"></div>
      </div>
    </div>
  </div>

  <script>
    // Function to get CSRF token from cookies
    function getCSRFToken() {
      const name = 'csrftoken';
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

    class CaptchaSystem {
      constructor() {
        this.elements = {
          canvas: document.getElementById('storyCanvas'),
          questionPanel: document.getElementById('questionPanel'),
          questionText: document.getElementById('questionText'),
          optionsDiv: document.getElementById('options'),
          resultMessage: document.getElementById('resultMessage'),
          difficultyIndicator: document.getElementById('difficulty-level'),
          timerContainer: document.getElementById('timer-container'),
          timerDisplay: document.getElementById('timer'),
          attemptsCounter: document.getElementById('attempts-count')
        };
        
        this.state = {
          difficulty: 1,
          failedAttempts: 0,
          timer: null,
          animationId: null,
          csrfToken: getCSRFToken()
        };
        
        this.adjustCanvasSize();
        this.init();
      }

      adjustCanvasSize() {
        const containerWidth = this.elements.canvas.parentElement.clientWidth;
        const maxWidth = Math.min(400, containerWidth - 40);
        
        this.elements.canvas.width = maxWidth;
        this.elements.canvas.height = maxWidth * 0.625;
      }

      init() {
        this.elements.timerContainer.style.display = 'none';
        
        this.loadCaptcha();
        this.setupEventListeners();
        
        window.addEventListener('resize', () => {
          this.adjustCanvasSize();
          if (this.state.currentChallenge) {
            this.runAnimation(this.state.currentChallenge.animation_data, () => this.showQuestion(this.state.currentChallenge));
          }
        });
      }

      setupEventListeners() {
        document.addEventListener('click', this.handleUserInteraction.bind(this), { once: true });
      }

      handleUserInteraction() {
        if (this.state.failedAttempts > 0) {
          this.updateUI();
        }
      }

      async loadCaptcha() {
        try {
          const response = await fetch('/get/', {
            headers: { 
              'X-Difficulty': this.state.difficulty,
              'X-CSRFToken': this.state.csrfToken
            },
            credentials: 'same-origin'
          });
          
          if (response.status === 403) {
            this.showBlockedMessage();
            return;
          }
          
          const data = await response.json();
          this.state.currentChallenge = data;
          this.runAnimation(data.animation_data, () => this.showQuestion(data));
        } catch (error) {
          console.error('CAPTCHA error:', error);
          this.showResult('System error. Please refresh.', false);
        }
      }

      runAnimation(animationData, callback) {
        if (this.state.animationId) {
          cancelAnimationFrame(this.state.animationId);
        }
        
        const { canvas } = this.elements;
        const ctx = canvas.getContext('2d');
        const actors = animationData.actors.map(a => ({
          ...a,
          x: -30,
          y: canvas.height / 2 + Math.random() * 60 - 30,
          active: false
        }));
        
        const startTime = Date.now();
        
        const animate = () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = 'rgba(245, 245, 245, 0.7)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          let allDone = true;
          const currentTime = Date.now() - startTime;
          
          actors.forEach(actor => {
            if (currentTime >= actor.delay * 1000) {
              actor.active = true;
              if (actor.x < canvas.width - 30) {
                const speedFactor = canvas.width / 500;
                actor.x += (this.state.difficulty >= 2 ? 3 : 2) * speedFactor;
                allDone = false;
              }
              this.drawActor(ctx, actor);
            } else {
              allDone = false;
            }
          });
          
          if (allDone) {
            this.state.animationId = null;
            setTimeout(callback, 1000);
          } else {
            this.state.animationId = requestAnimationFrame(animate);
          }
        };
        
        this.state.animationId = requestAnimationFrame(animate);
      }

      drawActor(ctx, actor) {
        const radius = Math.min(12, ctx.canvas.width / 35);
        
        ctx.fillStyle = actor.color;
        ctx.beginPath();
        ctx.arc(actor.x, actor.y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        if (actor.object) {
          const [_, color] = actor.object.split('_');
          ctx.fillStyle = color;
          const size = radius * 1.3;
          ctx.fillRect(actor.x - size/2, actor.y - size * 1.5, size, size);
          
          if (this.state.difficulty >= 2) {
            ctx.fillStyle = "#000";
            ctx.font = `${Math.max(8, radius/2)}px Arial`;
            ctx.fillText(actor.object.split('_')[0], actor.x - size/2, actor.y - size * 1.6);
          }
        }
      }

      showQuestion(data) {
        const { questionText, optionsDiv } = this.elements;
        questionText.textContent = data.question;
        optionsDiv.innerHTML = '';
        
        const options = [...new Set([...data.options, data.correct_answer])]
          .sort(() => Math.random() - 0.5);
        
        options.forEach(option => {
          const button = document.createElement('button');
          button.className = 'captcha-btn';
          button.textContent = option;
          button.onclick = () => this.verifyAnswer(option === data.correct_answer, data.id);
          optionsDiv.appendChild(button);
        });
        
        this.elements.questionPanel.style.display = 'block';
      }

      async verifyAnswer(isCorrect, challengeId) {
        if (isCorrect) {
            this.showResult("Verification successful! Redirecting...", true);
            this.state.failedAttempts = 0;
            
            try {
                const response = await fetch('/submit/', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRFToken': this.state.csrfToken
                    },
                    body: JSON.stringify({ 
                        id: challengeId, 
                        answer: this.state.currentChallenge.correct_answer 
                    }),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.status === 'passed') {
                    if (window.parent !== window) {
                        window.parent.postMessage('captchaSuccess', window.location.origin);
                    }
                    setTimeout(() => window.close(), 1000);
                } else {
                    this.showResult("Verification failed. Please try again.", false);
                    setTimeout(() => this.loadCaptcha(), 1500);
                }
            } catch (error) {
                console.error('Submission error:', error);
                this.showResult("Error submitting answer. Please try again.", false);
            }
        } else {
            this.state.failedAttempts++;
            this.showResult("Incorrect answer. Please try again.", false);
            
            if (this.state.failedAttempts >= 4) {
                this.showBlockedMessage();
                await this.reportExcessiveAttempts();
                return;
            } else {
                this.state.difficulty = Math.min(3, Math.floor(this.state.failedAttempts / 3) + 1);
                setTimeout(() => this.loadCaptcha(), 1500);
            }
            
            this.updateUI();
        }
      }

      async reportExcessiveAttempts() {
        try {
          await fetch('/report_attempts/', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'X-CSRFToken': this.state.csrfToken
            },
            body: JSON.stringify({ attempts: this.state.failedAttempts })
          });
        } catch (error) {
          console.error('Failed to report attempts:', error);
        }
      }

      updateUI() {
        const difficultySpan = document.getElementById('difficulty-level');
        const attemptsSpan = document.getElementById('attempts-count');
        const timerContainer = this.elements.timerContainer;
        
        if (difficultySpan) difficultySpan.textContent = this.state.difficulty;
        if (attemptsSpan) attemptsSpan.textContent = this.state.failedAttempts;
        
        if (this.state.difficulty >= 2) {
            timerContainer.style.display = 'block';
            this.startTimer(20);
        } else {
            timerContainer.style.display = 'none';
            clearInterval(this.state.timer);
        }
      }

      startTimer(seconds) {
        clearInterval(this.state.timer);
        let timeLeft = seconds;
        this.updateTimer(timeLeft);
        
        this.state.timer = setInterval(() => {
          timeLeft--;
          this.updateTimer(timeLeft);
          
          if (timeLeft <= 0) {
            clearInterval(this.state.timer);
            this.handleTimeout();
          }
        }, 1000);
      }

      updateTimer(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        this.elements.timerDisplay.textContent = `${mins}:${secs < 10 ? '0' : ''}${secs}`;
      }

      handleTimeout() {
        this.state.failedAttempts++;
        this.showResult("Time expired! Loading new challenge...", false);
        this.updateUI();
        setTimeout(() => this.loadCaptcha(), 1500);
      }

      showResult(message, isSuccess) {
        const { resultMessage } = this.elements;
        resultMessage.textContent = message;
        resultMessage.className = `captcha-result ${isSuccess ? 'success' : 'error'}`;
        resultMessage.style.display = 'block';
      }

      showBlockedMessage() {
        this.elements.questionPanel.innerHTML = `
          <div class="blocked-message">
            <h3>Access Temporarily Blocked</h3>
            <p>Too many incorrect attempts detected. For security reasons, you'll need to wait, reload and try again.</p>
            <p>Please refresh the page to try again.</p>
          </div>
        `;
      }
    }
    
    document.addEventListener('DOMContentLoaded', () => new CaptchaSystem());
  </script>
</body>
</html>